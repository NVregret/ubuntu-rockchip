name: build-compose

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      board:
        description: target board
        required: true
        type: choice
        options:
        - "orangepi5"
        - "orangepi5b"
        - "orangepi5plus"
        - "rock5b"
        - "rock5a"
        - "nanopir6c"
        - "nanopir6s"
        - "indiedroid-nova"
        - "lubancat-4"
        - "hinlink-h88k"
      clean:
        description: clean the build directory
        required: true
        default: false
        type: boolean
      docker:
        description: use docker to build
        required: true
        default: false
        type: boolean
      kernel-only:
        description: only compile the kernel
        required: true
        default: false
        type: boolean
      uboot-only:
        description: only compile uboot
        required: true
        default: false
        type: boolean
      launchpad:
        description: use kernel and uboot from launchpad repo
        required: true
        default: false
        type: boolean
      verbose:
        description: increase the verbosity of the bash script
        required: true
        default: false
        type: boolean

env:
  TZ: Asia/Shanghai
  
jobs:

  Build:
    runs-on: ubuntu-22.04
    timeout-minutes: 1440
    steps:
      
    - name: Checkout
      uses: actions/checkout@v3

    - name: Build
      run: |
        args=""
        if [ "${{ inputs.clean }}" == true ]; then
          args="-c"
        fi
        if [ "${{ inputs.docker }}" == true ]; then
          args="$args -d"
        fi
        if [ "${{ inputs.kernel-only }}" == true ]; then
          args="$args -k"
        fi
        if [ "${{ inputs.uboot-only }}" == true ]; then
          args="$args -u"
        fi
        if [ "${{ inputs.launchpad }}" == true ]; then
          args="$args -l"
        fi
        if [ "${{ inputs.verbose }}" == true ]; then
          args="$args -v"
        fi
        sudo apt update
        sudo apt upgrade
        sudo apt-get install -y build-essential gcc-aarch64-linux-gnu bison \
        qemu-user-static qemu-system-arm qemu-efi u-boot-tools binfmt-support \
        debootstrap flex libssl-dev bc rsync kmod cpio xz-utils fakeroot parted \
        udev dosfstools uuid-runtime git-lfs device-tree-compiler python2 python3 \
        python-is-python3 fdisk bc debhelper pip swig python3-pyelftools
        sudo ./build.sh -b ${{ inputs.board }} $args
